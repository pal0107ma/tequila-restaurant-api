type Query {
  # USER PROFILE
  userProfile(
    "must be a valid mongo id"
    id: ID
  ): User

  #######################################
  # RESTAURANT QUERIES
  #######################################

  restaurant(
    "must be a valid mongo id"
    id: ID!
  ): Restaurant

  restaurants(
    q: String
    plan: restaurantPlanEnum
    status: restaurantStatusEnum
    "integer min 0 default 0"
    offset: Int
    "integer min 5 default 10"
    count: Int
  ): [Restaurant]

  #######################################
  # BRANCH OFFICES QUERIES
  #######################################

  branchOffice(id: ID!): BranchOffice

  branchOffices(
    q: String
    "must be a valid mongo id"
    restaurantId: ID!
    "must be boolean"
    principal: Boolean
    "integer min 0 default 0"
    offset: Int
    "integer min 5 default 10"
    count: Int
  ): [BranchOffice]

  #######################################
  # PRODUCT QUERIES
  #######################################

  products(
    q: String
    "must be a valid mongo id"
    branchId: ID!
    "integer min 0 default 0"
    offset: Int
    "integer min 5 default 10"
    count: Int
    "must be a valid mongo id"
    category: ID
  ): [Product]

  product(
    "must be a valid mongo id"
    id: ID!
  ): Product

  #######################################
  # INVENTORY QUERIES
  #######################################

  inventoryEntry(
    "must be a valid mongo id"
    id: ID!
  ): InventoryEntry

  inventoryEntries(
    q: String
    "must be a valid mongo id"
    branchId: ID!
    "must be a valid mongo id"
    category: ID
    "integer min 0 default 0"
    offset: Int
    "integer min 5 default 10"
    count: Int
  ): [InventoryEntry]  

  #######################################
  # PRODUCT CATEGORY QUERIES
  #######################################

  productCategories(
    "must be a valid mongo id"
    branchId: ID!
  ): [ProductCategory]

  #######################################
  # RECIPE CATEGORY QUERIES
  #######################################

  recipeCategories(
    "must be a valid mongo id"
    branchId: ID!
  ): [RecipeCategory]

  #######################################
  # PROVIDERS QUERIES
  #######################################

  provider(
    "must be a valid mongo id"
    id: ID!
  ): Provider

  providers(
    q: String
    "must be a valid mongo id"
    restaurantId: ID!
    "integer min 0 default 0"
    offset: Int
    "integer min 5 default 10"
    count: Int
  ): [Provider]

  #######################################
  # RECIPE QUERIES
  #######################################

  recipe(
    "must be a valid mongo id"
    id: ID!
  ): Recipe

  recipes(
    q: String
    "must be a valid mongo id"
    branchId: ID!
    "integer min 0 default 0"
    offset: Int
    "integer min 5 default 10"
    count: Int
    "must be a valid mongo id"
    category: ID
  ): [Recipe]

}

type Mutation {
  updateUser(
    password: String
    "must be a valid email"
    email: String
    "security requires the user password when user changes his password or email"
    security: String
    "min length 3 max length 30"
    firstName: String
    "min length 3 max length 30"
    lastName: String
    "min length 3 max length 15"
    phoneNr: String
  ): User

  #######################################
  # RESTAURANT MUTATIONS
  #######################################

  addRestaurant(
    "min length 3 max length 60"
    name: String!
    plan: restaurantPlanEnum!
    status: restaurantStatusEnum!
    principalBranchOffice: addRestaurantBrachInput!
  ): Restaurant

  updateRestaurant(
    plan: restaurantPlanEnum
    status: restaurantStatusEnum
    "min length 3 max length 60"
    name: String
    "must be a valid mongo id"
    id: ID!
  ): Restaurant

  # deleteRestaurant(id: ID!): Restaurant

  #######################################
  # BRANCH OFFICES MUTATIONS
  #######################################

  addBranchOffice(
    "must be a valid mongo id"
    restaurantId: ID!
    "min length 3 max length 60"
    name: String!
    "min length 3 max length 60"
    zone: String!
    "min length 3 max length 60"
    city: String!
    "min length 3 max length 100"
    address: String!
    "min length 3 max length 60"
    state: String!
    "min length 2 max length 2"
    country: String!

    zip: Int!
  ): BranchOffice

  # deleteBranchOffice(id: ID!): BranchOffice

  updateBranchOffice(
    "must be a valid mongo id"
    id: ID!
    "min length 3 max length 60"
    name: String
    "min length 3 max length 60"
    zone: String
    "min length 3 max length 60"
    city: String
    "min length 3 max length 100"
    address: String
    "min length 3 max length 60"
    state: String
    "min length 2 max length 2"
    country: String

    zip: Int
  ): BranchOffice

  #######################################
  # BRANCH INVITE MUTATIONS
  #######################################

  addBranchInvite (
    branchRole: [branchRoleEnum!]!
    "must be a valid mongo id"
    branchId: ID!
    "must be a valid email"
    userEmail: String!
    "must be a valid mongo id array"
    categoriesId: [ID!]!
  ): BranchOffice

  #######################################
  # BRANCH ACCESS MUTATIONS
  #######################################

  deleteBranchAccess(
    "must be a valid mongo id"
    id: ID!
  ): User

  updateBranchAccess(
    branchRole: [branchRoleEnum!]
    "must be a valid mongo id"
    id: ID!
    "must be a valid mongo id"
    categoriesId: [ID!]
  ): User

  #######################################
  # PRODUCTS MUTATIONS
  #######################################

  addProduct(
    measureUnit: measureUnitsEnum
    "min length 3 max length 50"
    name: String!
    "min length 3 max length 100"
    description: String!
    "must be a valid mongo id"
    category: ID!
    "must be a valid mongo id"
    branchId: ID!
    "integer min 1"
    countableAmount: Int!
    "integer min 1"
    contentAmountWeight: Int!
  ): Product

  updateProduct(
    measureUnit: measureUnitsEnum
    "min length 3 max length 50"
    name: String
    "min length 3 max length 100"
    description: String
    "must be a valid mongo id"
    category: ID
    "integer min 1"
    countableAmount: Int
    "integer min 1"
    contentAmountWeight: Int
    "must be a valid mongo id"
    id: ID!
  ): Product

  deleteProduct(
    "must be a valid mongo id"
    id: ID!
  ): Product

  #######################################
  # INVENTORY MUTATIONS
  #######################################

  addInventoryEntry(
    "must be a valid mongo id"
    productId: ID!
    "integer min 1"
    quantity: Int!
    "float num min 0.0001"
    purchasePrice: Float!
  ): InventoryEntry

  deleteInventoryEntry(
    "must be a valid mongo id"
    id: ID!
  ): InventoryEntry

  #######################################
  # PRODUCT CATEGORY MUTATIONS
  #######################################

  addProductCategory(
    "min length 3 max length 50"
    name: String!
    "must be a valid mongo id"
    branchId: ID!
  ): ProductCategory

  deleteProductCategory(
    "must be a valid mongo id"
    id: ID!
  ): ProductCategory

  #######################################
  # RECIPE CATEGORY MUTATIONS
  #######################################

  addRecipeCategory(
    "min length 3 max length 50"
    name: String!
    "must be a valid mongo id"
    branchId: ID!
  ): RecipeCategory

  deleteRecipeCategory(id: ID!): RecipeCategory

  #######################################
  # PROVIDERS MUTATIONS
  #######################################

  addProvider(
    "min length 3 max length 60"
    name: String!
    "min length 3 max length 30"
    phoneNr: String
    "must be a valid email"
    email: String
    "min length 3 max length 100"
    description: String
    "must be a valid mongo id"
    restaurantId: ID!
  ): Provider

  updateProvider(
    "must be a valid mongo id"
    id: ID!
    "min length 3 max length 60"
    name: String
    "min length 3 max length 30"
    phoneNr: String
    "must be a valid email"
    email: String
    "min length 3 max length 100"
    description: String
  ): Provider

  deleteProvider(
    "must be a valid mongo id"
    id: ID!
  ): Provider

  #######################################
  # RECIPE MUTATIONS
  #######################################

  addRecipe(
    "must be a valid mongo id"
    branchId: ID!
    "min length 3 max length 60"
    description: String!
    "min length 3 max length 30"
    name: String!
   "must be a valid mongo id"
    category: ID!
  ): Recipe

  deleteRecipe(
    "must be a valid mongo id"
    id: ID!
  ): Recipe

  updateRecipe(
    "must be a valid mongo id"
    id: ID!
    "min length 3 max length 60"
    description: String
    "min length 3 max length 30"
    name: String
    "must be a valid mongo id"
    category: ID
  ): Recipe

  #######################################
  # RECIPE ITEM MUTATIONS
  #######################################

  addRecipeItem(
    "must be a valid mongo id"
    productId: ID!
    "must be a valid mongo id"
    recipeId: ID!
    "float num min 0.0001"
    quantity: Float!
  ): Recipe

  deleteRecipeItem(
    "must be a valid mongo id"
    id: ID!
  ): Recipe

  updateRecipeItem(
    "must be a valid mongo id"
    id: ID!
    "float num min 0.0001"
    quantity: Float
  ): Recipe

}

input addRestaurantBrachInput {
  "min length 3 max length 60"
  name: String!
  "min length 3 max length 60"
  zone: String!
  "min length 3 max length 60"
  city: String!
  "min length 3 max length 100"
  address: String!
  "min length 3 max length 60"
  state: String!
  "min length 2 max length 2"
  country: String!

  zip: Int!
}

#######################################
# PRODUCT CATEGORY
#######################################

type ProductCategory {
  id: ID
  name: String
}

#######################################
# RECIPE CATEGORY
#######################################

type RecipeCategory {
  id: ID
  name: String
}

#######################################
# RESTAURANT
#######################################

type Restaurant {
  id: ID
  name: String
  plan: restaurantPlanEnum
  status: restaurantStatusEnum
  userId: String
  updatedAt: String
  createdAt: String
}

enum restaurantPlanEnum {
  STARTER
  SILVER
  DIAMOND
  GOLD
}

enum restaurantStatusEnum {
  ACTIVE
  CANCELLED
  SUSPENDED
}
#######################################
# BRANCH OFFICE
#######################################

type BranchOffice {
  restaurantId: ID
  id: ID
  name: String
  zone: String
  city: String
  address: String
  state: String
  country: String
  zip: Int
  principal: Boolean
  updatedAt: String
  createdAt: String
  users: [BranchOfficeUser]
  user(
    "branch access id"
    id: ID!
    ): BranchOfficeUser
} 

type BranchOfficeUser {
  userId: ID
  "branch access id"
  id: ID
  branchRole: [branchRoleEnum]
  categoriesId: [ID]
}

enum branchRoleEnum {
  STORER
  HR
  CHEF
}

#######################################
# USER
#######################################

type User {
  id: ID
  email: String
  firstName: String
  lastName: String
  createdAt: String
  updatedAt: String
  userType: userTypeEnum
  "associated restaurants"
  associated: Boolean
  allowedBranches: [BrachAccess]
  subscriptions: [UserSubscription]
  phoneNr: String
}

type BrachAccess {
  id: ID
  branchId: ID
  branchRole: [branchRoleEnum]
}

type UserSubscription {
  id: ID
  subscription: Subscription
  # paymentDetails: PaymentDetails
  datePurchased: String
}

enum userTypeEnum {
  SUPER_ADMIN
  ADMIN
  EMPLOYER
}

enum paymentMethodEnum {
  PAYPAL
  STRIPE
}

#######################################
# RECIPE
#######################################

type Recipe {
  id: ID
  name: String
  description: String
  items: [RecipeItem]
  branchId: ID
  category: ID
}

type RecipeItem {
  id: ID
  productId: ID
  quantity: Float
}

#######################################
# SUBSCRIPTION
#######################################

type Subscription {
  id: ID
  subscriptionPrice: Int
  subscriptionDescription: String
  subscriptionName: String
  modulesLimit: ModulesLimit
}

type ModulesLimit {
  providers: Int
  buy: Int
  expenses: Int
  payroll: Int
  recipes: Int
  reports: Int
}

#######################################
# PRODUCT
#######################################

type Product {
  id: ID
  branchId: ID
  name: String
  description: String
  category: String
  countableAmount: Int
  measureUnit: measureUnitsEnum
  contentAmountWeight: Int
  createdAt: String
  updatedAt: String
}

enum measureUnitsEnum {
  OZ
  LIB
}

#######################################
# INVENTORY IN
#######################################

type InventoryEntry {
  id: ID
  branchId: ID
  purchasePrice: Float
  quantity: Int
  totalUnits: Int
  available: Int
  unitCost: Float
  productId: ID
  createdAt: String
  updatedAt: String
}

#######################################
# PROVIDER IN
#######################################

type Provider {
  id: ID
  name: String
  email: String
  phoneNr: String
  restaurantId: ID
  desc: String
  createdAt: String
  updatedAt: String
}