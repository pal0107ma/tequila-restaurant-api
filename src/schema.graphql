type Query {
  userProfile(id: ID): User

  restaurant(id: ID!): Restaurant

  restaurants(
    q: String
    plan: restaurantPlanEnum
    status: restaurantStatusEnum
    offset: Int
    count: Int
  ): [Restaurant]
}

type Mutation {
  updateUser(
    email: String
    password: String
    "security requires the user password when user changes his password or email"
    security: String
    username: String
    firstName: String
    lastName: String
  ): User

  addRestaurant(
    name: String!
    plan: restaurantPlanEnum!
    status: restaurantStatusEnum!
  ): Restaurant

  updateRestaurant(
    name: String
    plan: restaurantPlanEnum
    status: restaurantStatusEnum
    id: ID!
    branchOffices: [updateBranchOfficeInput]
  ): Restaurant

  deleteRestaurant(id: ID!): Restaurant

  addBranchOffice(
    "restaurant id"
    id: ID!
    "min length 3 max length 60"
    name: String!
    "min length 3 max length 60"
    zone: String!
    "min length 3 max length 60"
    city: String!
    "min length 3 max length 100"
    address: String!
    "min length 3 max length 60"
    state: String!
    "min length 2 max length 2"
    country: String!

    zip: Int!
  ): Restaurant

  deleteBranchOffice(
    "branch office id"
    id: ID!
    "restaurant id"
    restaurantId: ID!
  ): Restaurant

  addAffiliate(
    "branch office id"
    branchOfficeId: ID!
    "restaurant id"
    id: ID!
    "affiliate role"
    role: branchOfficeAffiliateRoleEnum!
    "user email"
    email: String!
  ): Restaurant

  deleteAffiliate(
    "branch office id"
    branchOfficeId: ID!
    "restaurant id"
    id: ID!
    "affiliate role"
    affiliateId: ID!
  ): Restaurant
}

type Restaurant {
  id: ID
  "min length 3 max length 60"
  name: String
  "in SILVER, DIAMOND, GOLD"
  plan: String
  "in ACTIVE, CANCELLED, SUSPENDED"
  status: String
  branchOffices: [BranchOffice]
  branchOffice(id: ID!): BranchOffice
  userId: String
  updatedAt: String
  createdAt: String
}

type BranchOffice {
  id: ID
  name: String
  zone: String
  city: String
  address: String
  state: String
  zip: Int
  updatedAt: String
  createdAt: String
  affiliates: [Affiliate]
}

type Affiliate {
  id: ID
  user: AffiliateUser
  role: branchOfficeAffiliateRoleEnum
}

type AffiliateUser {
  id: ID
  firstName: String
  lastName: String
  email: String
}

input updateBranchOfficeInput {
  id: ID!
  name: String
  zone: String
  city: String
  address: String
  state: String
  zip: Int
}

enum restaurantPlanEnum {
  STARTER
  SILVER
  DIAMOND
  GOLD
}

enum restaurantStatusEnum {
  ACTIVE
  CANCELLED
  SUSPENDED
}

type User {
  id: ID
  email: String
  username: String
  accountConfirmed: Boolean
  firstName: String
  lastName: String
  createdAt: String
  updatedAt: String
  role: userRoleEnum
}

enum branchOfficeAffiliateRoleEnum {
  STORER
  HR
  COUNTER
  CHEF
}

enum userRoleEnum {
  SUPER_ADMIN
  ADMIN
}
