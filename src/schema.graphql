type Query {
  userProfile(id: ID): User

  restaurant(id: ID!): Restaurant

  restaurants(
    q: String
    plan: restaurantPlanEnum
    status: restaurantStatusEnum
    offset: Int
    count: Int
  ): [Restaurant]
}

type Mutation {
  updateUser(
    email: String
    password: String
    "security requires the user password when user changes his password or email"
    security: String
    firstName: String
    lastName: String
    phoneNr: String
  ): User

  addRestaurant(
    name: String!
    plan: restaurantPlanEnum!
    status: restaurantStatusEnum!
  ): Restaurant

  updateRestaurant(
    name: String
    plan: restaurantPlanEnum
    status: restaurantStatusEnum
    id: ID!
  ): Restaurant

  deleteRestaurant(id: ID!): Restaurant

  addBranchOffice(
    restaurantId: ID!
    "min length 3 max length 60"
    name: String!
    "min length 3 max length 60"
    zone: String!
    "min length 3 max length 60"
    city: String!
    "min length 3 max length 100"
    address: String!
    "min length 3 max length 60"
    state: String!
    "min length 2 max length 2"
    country: String!

    zip: Int!
  ): BranchOffice

  deleteBranchOffice(id: ID!): BranchOffice

  addAffiliate(
    "branch office id"
    branchOfficeId: ID!
    "restaurant id"
    id: ID!
    "affiliate role"
    role: branchOfficeAffiliateRoleEnum!
    "user email"
    email: String!
  ): Restaurant

  deleteAffiliate(
    "branch office id"
    branchOfficeId: ID!
    "restaurant id"
    id: ID!
    "affiliate role"
    affiliateId: ID!
  ): Restaurant
}

type Restaurant {
  id: ID
  "min length 3 max length 60"
  name: String
  "in SILVER, DIAMOND, GOLD"
  plan: String
  "in ACTIVE, CANCELLED, SUSPENDED"
  status: String
  userId: String
  updatedAt: String
  createdAt: String
}

type BranchOffice {
  id: ID
  name: String
  zone: String
  city: String
  address: String
  state: String
  zip: Int
  updatedAt: String
  createdAt: String
}

enum restaurantPlanEnum {
  STARTER
  SILVER
  DIAMOND
  GOLD
}

enum restaurantStatusEnum {
  ACTIVE
  CANCELLED
  SUSPENDED
}

type User {
  id: ID
  email: String
  firstName: String
  lastName: String
  createdAt: String
  updatedAt: String
  userType: userTypeEnum
  "associated restaurants"
  associated: Boolean
  allowedBranches: [BrachAccess]
  subscriptions: [UserSubscription]
  phoneNr: String
}

type BrachAccess {
  branchId: ID
  branchRole: [branchRoleEnum]
}

type UserSubscription {
  cycle: subscriptionCycleEnum
  subscription: Subscription
  # paymentDetails: PaymentDetails
  datePurchased: String
}

type Subscription {
  subscriptionPrice: Int
  subscriptionDescription: String
  subscriptionName: String
  activeModules: ActiveModules
  modulesLimit: ModulesLimit
}

type ActiveModules {
  providers: Boolean
  buy: Boolean
  expenses: Boolean
  payroll: Boolean
  recipes: Boolean
  reports: Boolean
}

type ModulesLimit {
  providers: Int
  buy: Int
  expenses: Int
  payroll: Int
  recipes: Int
  reports: Int
}


# type PaymentDetails {
#   paymentMethod: paymentMethodEnum  
#   txId: String
#   timestamp: String
# }

enum paymentMethodEnum {
  PAYPAL
  STRIPE
}

enum subscriptionCycleEnum {
  YEARLY
  MONTHLY
  QUARTERLY
}

enum branchRoleEnum {
  STORER
  HR
  COUNTER
  CHEF
}

enum userTypeEnum {
  SUPER_ADMIN
  ADMIN
  EMPLOYER
}
